# CodeIt Janitor
# See repository LICENSE

import re
import os
import logging
import json

# Matches strings such as: $flqajqcgnb = Number(" 1 ")
LITERAL_CONSTANT_PATTERN = r'(\$([a-z]{10}) = Number\((" ([0-9]{1,}) ")\))'

# Get rid of duplicate global variables for constants 
def dedupe_constants(src):
    num_vars = re.findall(LITERAL_CONSTANT_PATTERN, src)

    # Tracking map for constants. 
    # Entry format: key=[value of constant], value=[name of constant var]
    found_constants = {}

    # example: var_name="flmayhqwzl", var_val=0
    for (_full, var_name, _, var_val) in num_vars:
        if var_val not in found_constants:
            # This constant hasn't been defined before.
            # Put the constant in the tracking map so we can replace duplicate variables
            found_constants[var_val] = var_name
        else:
            # This constant has already been defined.
            # Remove the declaration from the script
            src = src.replace('$%s = Number(" %d ")' % (var_name, int(var_val)), '')
            # Replace all occurrences of the name of the duplicate variable 
            # with the name of the original variable
            src = src.replace(var_name, found_constants[var_val])

    # Do a bit of comma cleanup (more will occur later)
    return re.sub(r'(, ){2,}', '', src)

# Inline constant values
def inline_constants(src):
    num_vars = re.findall(LITERAL_CONSTANT_PATTERN, src)
    const_names = set()

    for (full, var_name, _, var_val) in num_vars:
        const_names.add(var_name)

        # Rename variable to num_x where x = constant value
        # Example:
        #    $flqajqcgnb = Number(" 1 ")
        # to
        #    $num_1 = 1
        src = src.replace(full, '$num_%d = %d' % (int(var_val), int(var_val))).replace('$%s' % (var_name), '$num_%d' % (int(var_val)))

    # Replace all usages of $num_x with the value of x
    return re.sub(r'(?!Global.*=)(\$num_([0-9]+))', r'\g<2>', src)


# Decode hex-strings and inline usages
def resolve_obfuscated_strings(src):
    # Taken from AREIHNVAPWN function
    longstr = "7374727563743b75696e7420626653697a653b75696e7420626652657365727665643b75696e742062664f6666426974733b75696e7420626953697a653b696e7420626957696474683b696e742062694865696768743b7573686f7274206269506c616e65733b7573686f7274206269426974436f756e743b75696e74206269436f6d7072657373696f6e3b75696e7420626953697a65496d6167653b696e742062695850656c735065724d657465723b696e742062695950656c735065724d657465723b75696e74206269436c72557365643b75696e74206269436c72496d706f7274616e743b656e647374727563743b4FD5$626653697a654FD5$626652657365727665644FD5$62664f6666426974734FD5$626953697a654FD5$626957696474684FD5$62694865696768744FD5$6269506c616e65734FD5$6269426974436f756e744FD5$6269436f6d7072657373696f6e4FD5$626953697a65496d6167654FD5$62695850656c735065724d657465724FD5$62695950656c735065724d657465724FD5$6269436c72557365644FD5$6269436c72496d706f7274616e744FD5$7374727563743b4FD5$627974655b4FD5$5d3b4FD5$656e647374727563744FD5$4FD5$2e626d704FD5$5c4FD5$2e646c6c4FD5$7374727563743b64776f72643b636861725b313032345d3b656e647374727563744FD5$6b65726e656c33322e646c6c4FD5$696e744FD5$476574436f6d70757465724e616d65414FD5$7074724FD5$436f6465497420506c7573214FD5$7374727563743b627974655b4FD5$5d3b656e647374727563744FD5$7374727563743b627974655b35345d3b627974655b4FD5$7374727563743b7074723b7074723b64776f72643b627974655b33325d3b656e647374727563744FD5$61647661706933322e646c6c4FD5$437279707441637175697265436f6e74657874414FD5$64776f72644FD5$4372797074437265617465486173684FD5$437279707448617368446174614FD5$7374727563742a4FD5$437279707447657448617368506172616db7074723b7074723b64776f72643b627974655b383139325d3b627974655b4FD5$5d3b64776f72643b656e647374727563744FD5$4372797074496d706f72744b65794FD5$4372797074446563727970744FD5$464c4152454FD5$4552414c464FD5$437279707444657374726f794b65794FD5$437279707452656c65617365436f6e746578744FD5$437279707444657374726f79486173684FD5$7374727563743b7074723b7074723b64776f72643b627974655b31365d3b656e647374727563744FD5$7374727563743b64776f72643b64776f72643b64776f72643b64776f72643b64776f72643b627974655b3132385d3b656e647374727563744FD5$47657456657273696f6e4578414FD5$456e746572207465787420746f20656e636f64654FD5$43616e2068617a20636f64653f4FD5$4FD5$48656c704FD5$41626f757420436f6465497420506c7573214FD5$7374727563743b64776f72643b64776f72643b627974655b333931385d3b656e647374727563744FD5$696e743a636465636c4FD5$6a75737447656e6572617465515253796d626f6c4FD5$7374724FD5$6a757374436f6e76657274515253796d626f6c546f4269746d6170506978656c734FD5$546869732070726f6772616d2067656e65726174657320515220636f646573207573696e6720515220436f64652047656e657261746f72202868747470733a2f2f7777772e6e6179756b692e696f2f706167652f71722d636f64652d67656e657261746f722d6c6962726172792920646576656c6f706564206279204e6179756b692e204FD5$515220436f64652047656e657261746f7220697320617661696c61626c65206f6e20476974487562202868747470733a2f2f6769746875622e636f6d2f6e6179756b692f51522d436f64652d67656e657261746f722920616e64206f70656e2d736f757263656420756e6465722074686520666f6c6c6f77696e67207065726d697373697665204d4954204c6963656e7365202868747470733a2f2f6769746875622e636f6d2f6e6179756b692f51522d436f64652d67656e657261746f72236c6963656e7365293a4FD5$436f7079726967687420c2a920323032302050726f6a656374204e6179756b692e20284d4954204c6963656e7365294FD5$68747470733a2f2f7777772e6e6179756b692e696f2f706167652f71722d636f64652d67656e657261746f722d6c6962726172794FD5$5065726d697373696f6e20697320686572656279206772616e7465642c2066726565206f66206368617267652c20746f20616e7920706572736f6e206f627461696e696e67206120636f7079206f66207468697320736f66747761726520616e64206173736f63696174656420646f63756d656e746174696f6e2066696c6573202874686520536f667477617265292c20746f206465616c20696e2074686520536f66747761726520776974686f7574207265737472696374696f6e2c20696e636c7564696e6720776974686f7574206c696d69746174696f6e207468652072696768747320746f207573652c20636f70792c206d6f646966792c206d657267652c207075626c6973682c20646973747269627574652c207375626c6963656e73652c20616e642f6f722073656c6c20636f70696573206f662074686520536f6674776172652c20616e6420746f207065726d697420706572736f6e7320746f2077686f6d2074686520536f667477617265206973206675726e697368656420746f20646f20736f2c207375626a65637420746f2074686520666f6c6c6f77696e6720636f6e646974696f6e733a4FD5$312e205468652061626f766520636f70797269676874206e6f7469636520616e642074686973207065726d697373696f6e206e6f74696365207368616c6c20626520696e636c7564656420696e20616c6c20636f70696573206f72207375627374616e7469616c20706f7274696f6e73206f662074686520536f6674776172652e4FD5$322e2054686520536f6674776172652069732070726f76696465642061732069732c20776974686f75742077617272616e7479206f6620616e79206b696e642c2065787072657373206f7220696d706c6965642c20696e636c7564696e6720627574206e6f74206c696d6974656420746f207468652077617272616e74696573206f66206d65726368616e746162696c6974792c206669746e65737320666f72206120706172746963756c617220707572706f736520616e64206e6f6e696e6672696e67656d656e742e20496e206e6f206576656e74207368616c6c2074686520617574686f7273206f7220636f7079726967687420686f6c64657273206265206c6961626c6520666f7220616e7920636c61696d2c2064616d61676573206f72206f74686572206c696162696c6974792c207768657468657220696e20616e20616374696f6e206f6620636f6e74726163742c20746f7274206f72206f74686572776973652c2061726973696e672066726f6d2c206f7574206f66206f7220696e20636f6e6e656374696f6e20776974682074686520536f667477617265206f722074686520757365206f72206f74686572206465616c696e677320696e2074686520536f6674776172652e4FD5$7374727563743b7573686f72743b656e647374727563744FD5$7374727563743b627974653b627974653b627974653b656e647374727563744FD5$43726561746546696c654FD5$75696e744FD5$53657446696c65506f696e7465724FD5$6c6f6e674FD5$577269746546696c654FD5$7374727563743b64776f72643b656e647374727563744FD5$5265616446696c654FD5$436c6f736548616e646c654FD5$44656c65746546696c65414FD5$47657446696c6553697a65"
    # 4FD5$ is the delimiter used by the AutoIt script.
    longstrparts = longstr.split("4FD5$")
    decodedparts = []
    
    # Each split part is a hex-string - no special decoding is necessary.
    # Just convert to bytes object and decode as a UTF-8 string.
    for x in range(len(longstrparts)):
        longstrpart = longstrparts[x]
        decodedparts.append(bytes.fromhex(longstrpart).decode('utf-8'))

    # Find instances of: AREHDIDXRGK($os[x]) where x is an integer
    # Replace with appropriate string for array index [x]
    # (Constant deduplication/inlining must take place before this step)
    matches = re.findall(r'(AREHDIDXRGK\(\$os\[([0-9]+)\]\))', src)
    for (_, sindex) in matches:
        idx = int(sindex)
        # Replace AREHDIDXRGK($os[x]) with decodedparts[x-1]. 
        # AutoIt array indices start at 1, but Python starts at 0.
        src = src.replace('AREHDIDXRGK($os[%d])' % idx, '"%s"' % decodedparts[idx-1])
    return src

# Remove invalid global variables (such as the num_x temporaries)
def remove_invalid_globals(src):
    return re.sub(r'(Global \n)|(Global( ,)? ([0-9]{1,}.*)\n)', '', src)

# Apply function and variable mappings
def apply_mappings(src):
    with open('mappings.json', 'r') as mappings_file:
        mappings = json.load(mappings_file)
        for (orig_name, new_name) in mappings['names'].items():
            src = re.sub(r'\b'+orig_name+r'\b', new_name, src)
        for (remove_func) in mappings['remove_funcs']:
            pattern = r'Func ' + remove_func + r'(.*?)EndFunc'
            print("remove %s (pattern: %s)" % (remove_func, pattern))
            src = re.sub(pattern, '', src, flags=re.M|re.S|re.DOTALL)
    return src

# Remove unused functions
def remove_unused_functions(src):
    matches = re.findall(r'Func ([a-zA-Z_]+)\(', src)
    
    for match in matches:
        src = src.replace(';==>%s\n' % match, '\n')
        usages = re.findall(r'(?!Func )'+match, src)[1:]

        if len(usages) == 0:
            pattern = r'Func ' + match + r'(.*?)EndFunc'
            print("remove %s (pattern: %s)" % (match, pattern))
            src = re.sub(pattern, '', src, flags=re.M|re.S|re.DOTALL)
    return src

def remove_lingering_comments(src):
    src = re.sub(r'(\s+)?;==>([A-Za-z_]+)(\n?)', r'\g<3>', src)
    return re.sub(r'^\s+$[\r\n]*', '', src, flags=re.MULTILINE)

steps = [
    { 'name': 'Constant deduplication', 'func': dedupe_constants },
    { 'name': 'Constant inlining', 'func': inline_constants },
    { 'name': 'String deobfuscation', 'func': resolve_obfuscated_strings },
    { 'name': 'Invalid global removal', 'func': remove_invalid_globals },
    { 'name': 'Apply mappings', 'func': apply_mappings },
    { 'name': 'Remove unused functions', 'func': remove_unused_functions },
    { 'name': 'Remove lingering comments', 'func': remove_lingering_comments }
]

def main():
    logging.basicConfig(level="INFO")

    f = open('script_ORIGINAL.au3', 'r')
    src = f.read()
    f.close()

    for step in steps:
        print("Running: %s" % step['name'])
        src = step['func'](src)

    if os.path.exists('script_deobfuscated.au3'):
        print("Deobfuscated script file already exists. Delete or rename it to generate a new one.")
        return

    src = src.strip('\n').strip(' ')

    of = open('script_deobfuscated.au3', 'w', encoding='utf8')
    of.write(src)

main()